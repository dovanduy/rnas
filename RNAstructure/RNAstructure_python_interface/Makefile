#### The PYTHON interface library ####

ROOTPATH=..# Define the relative path to the RNAstructure root directory.
## Include all macro, dependency, and variable definitions.
include ${ROOTPATH}/compiler.h
include ${ROOTPATH}/library_defines.h
include ${ROOTPATH}/dependencies.h

# The subdirectory *this* Makefile is in, relative to the RNAstructure root.
PY_DIR = RNAstructure_python_interface

# The PYTHON variable can be set on the Make command-line to set the path to the python executable.
# For example: `make python-interface PYTHON=/usr/bin/python2.7`
#          or  `make python-interface PYTHON=python3`
PYTHON ?= python

# The output library filename e.g. _RNAstructure_wrap.dll
ifeq ($(OS_NAME),Windows)
  WRAPPER_LIB_NAME=_RNAstructure_wrap.dll
else
  WRAPPER_LIB_NAME=_RNAstructure_wrap.so
endif

# The output directory, relative to this Makefile
BIN_DIR=../exe
# Python scripts and other files that need to be in the same directory as the library
SCRIPTS = RNAstructure.py  RNAstructure_wrap.py  Error_handling.py
# A temporary directory for object file output
BUILD_DIR=build/$(OS_NAME)_py$(PY_VERSION)/

PY_WRAP=$(BIN_DIR)/$(WRAPPER_LIB_NAME)

# fnGetPyCfg -- calls a python script to get python-specific build configuration settings.
fnGetPyCfg=$(shell $(PYTHON) ./get-config.py $1)

######### Get some python configuration settings ##########
# Note: `fnCacheVar` allows these variables to be evaluated on-demand
# and then cached so they will not be re-evaluated in the same Make run.
#  PY_INCLUDE_DIR -- directory containing headers needed for source code compilation
#                    of the wrapper library, e.g. "python.h".
$(call fnCacheVar,PY_INCLUDE_DIR,$$(call fnGetPyCfg,INCLUDEPY))
#  PY_VERSION -- The "short" version of python. Used to determine the name of the python library 
#                to use in the link command.
$(call fnCacheVar,PY_VERSION,$$(call fnGetPyCfg,VERSION))
#  PY_LIB_DIR -- Directory containing python shared libraries (needed for linking).
$(call fnCacheVar,PY_LIB_DIR,$$(call fnGetPyCfg,LIBPL))

PYTHON_CXXFLAGS= -I$(PY_INCLUDE_DIR)
LD_DYNAMIC=-Wl,-Bdynamic
FORCE_DYNAMIC=$(call fnIf,$(DO_STATIC_LINK),$(LD_DYNAMIC))# If we are statically linking (C-runtime and stdc++), make sure to DYNAMICALLY link to the python library.
PYTHON_LIBS= -lpthread $(FORCE_DYNAMIC) -L$(PY_LIB_DIR) -lpython$(PY_VERSION)
COPY_SCRIPTS = $(!CP) $(SCRIPTS) $(BIN_DIR)/

# This uses the RNAstructure Makefile build system to compile the 
# the Python Interface Native Libarary, _RNAstructure_wrap.{dll,so,dylib}
interface: $(PY_WRAP)
$(PY_WRAP): LDLIBS+=${PYTHON_LIBS}
$(PY_WRAP): LDFLAGS+=${LIBFLAGS} ${PYTHON_CXXFLAGS} 
$(PY_WRAP): $(PYTHON_LIBRARY_FILES)
	${LINK_DEPS}
	$(COPY_SCRIPTS)

# This uses python itself to build the RNAstructure interface library.
interface-dist: # build the python interface library
	mkdir -p $(BUILD_DIR)
	$(PYTHON) setup.py build_ext --inplace --build-temp $(PY_DIR)/$(BUILD_DIR)
	@# The wrapper is placed in the RNAstructure directory. Move it to exe/
	mv ../$(WRAPPER_LIB_NAME) $(BIN_DIR)
	$(COPY_SCRIPTS)

scripts: # copy RNAstructure.py and dependencies to ../exe/
	$(COPY_SCRIPTS)

sources:
	#Generate list of sources (used by setup.py in `interface-dist`)
	@echo '#This file is auto-generated by `make $@`. Manual edits may be overwritten.' > rna_sources.h
	@$(MAKE_CD) ../  src+python_interface_sources | grep -E '\.(cpp|cxx)$$' >> rna_sources.h

debug:
	# PY_VERSION=$(PY_VERSION)   PY_INCLUDE_DIR=$(PY_INCLUDE_DIR)   PY_LIB_DIR=$(PY_LIB_DIR)

#to generate your own wrapper files using SWIG
#should not normally be needed
swig:
	swig -python -c++ -keyword -w511 RNAstructure.i

all: swig interface

all-dist: sources swig interface-dist

clean:
	# Delete  $(PY_DIR)/build/
	rm -rf ./build/

realclean: clean
	cd $(BIN_DIR) && rm -f $(SCRIPTS) # Remove python interface scripts
	@rm -rf $(BIN_DIR)/__pycache__  # Remove python cache
	rm -f $(PY_WRAP)  # Remove python interface library binary
